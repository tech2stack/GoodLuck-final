// src/api/api.js

import axios from 'axios';

// Backend URL ko automatically use karein
const API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';

// Client-side cache store
const apiCache = {};
// Cache ka samay (expiry time): 10 minutes
const CACHE_EXPIRY_TIME = 600000;

// Axios instance banayein
const api = axios.create({
Â  Â  baseURL: `${API_BASE_URL}/api/v1`, 
Â  Â  withCredentials: true,
Â  Â  headers: {
Â  Â  Â  Â  'Content-Type': 'application/json',
Â  Â  },
});

// Request Interceptor: Authorization token attach karein
api.interceptors.request.use(
Â  Â  config => {
Â  Â  Â  Â  const token = localStorage.getItem('jwtToken');
Â  Â  Â  Â  if (token) {
Â  Â  Â  Â  Â  Â  config.headers.Authorization = `Bearer ${token}`;
Â  Â  Â  Â  }
Â  Â  Â  Â  return config;
Â  Â  },
Â  Â  error => Promise.reject(error)
);

// ðŸ”¥ NEW & FIXED: Response Interceptor mein cache clear karne ka logic
api.interceptors.response.use(
Â  Â  response => {
Â  Â  Â  Â  // Agar request successful hai aur POST, PATCH ya DELETE method use hua hai
Â  Â  Â  Â  const method = response.config.method;
Â  Â  Â  Â  if (method === 'post' || method === 'patch' || method === 'delete') {
Â  Â  Â  Â  Â  Â  // `classes` se related cache clear karein.
Â  Â  Â  Â  Â  Â  // Dynamic URLs ke liye, humesha base path clear karein.
Â  Â  Â  Â  Â  Â  api.clearCache('/classes'); 
Â  Â  Â  Â  }
Â  Â  Â  Â  return response;
Â  Â  },
Â  Â  error => {
Â  Â  Â  Â  if (error.response && error.response.status === 401) {
Â  Â  Â  Â  Â  Â  console.warn("Unauthorized â€” possibly invalid/expired token");
Â  Â  Â  Â  }
Â  Â  Â  Â  return Promise.reject(error);
Â  Â  }
);

// Cache ko URL ke adhar par clear karein
api.clearCache = (url) => {
Â  Â  for (const key in apiCache) {
Â  Â  Â  Â  const parsedKey = JSON.parse(key);
Â  Â  Â  Â  if (parsedKey.url === url) {
Â  Â  Â  Â  Â  Â  delete apiCache[key];
Â  Â  Â  Â  Â  Â  console.log(`Cache cleared for URL: ${url}`);
Â  Â  Â  Â  }
Â  Â  }
};

// Original get method ko ek variable mein store karein
const originalGet = api.get;

// Custom get() method, jismein caching logic hai
api.get = async (url, config = {}) => {
Â  Â  const cacheKey = JSON.stringify({ url, params: config.params });
Â  Â  const cachedEntry = apiCache[cacheKey];

Â  Â  if (cachedEntry && (Date.now() - cachedEntry.timestamp < CACHE_EXPIRY_TIME)) {
Â  Â  Â  Â  console.log(`Cache se data use kiya: ${url}`);
Â  Â  Â  Â  return Promise.resolve({ data: cachedEntry.data });
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  const response = await originalGet(url, config);
Â  Â  Â  Â  apiCache[cacheKey] = {
Â  Â  Â  Â  Â  Â  data: response.data,
Â  Â  Â  Â  Â  Â  timestamp: Date.now()
Â  Â  Â  Â  };
Â  Â  Â  Â  return response;
Â  Â  } catch (error) {
Â  Â  Â  Â  return Promise.reject(error);
Â  Â  }
};

export default api;
